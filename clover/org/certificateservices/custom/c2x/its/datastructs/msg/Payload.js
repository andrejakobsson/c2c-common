var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":107,"id":2813,"methods":[{"el":50,"sc":2,"sl":44},{"el":58,"sc":2,"sl":56},{"el":65,"sc":2,"sl":63},{"el":72,"sc":2,"sl":70},{"el":82,"sc":2,"sl":74},{"el":94,"sc":2,"sl":84},{"el":103,"sc":2,"sl":96}],"name":"Payload","sl":31}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_102":{"methods":[{"sl":44},{"sl":63},{"sl":70},{"sl":74}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45},{"sl":48},{"sl":49},{"sl":64},{"sl":71},{"sl":76},{"sl":77},{"sl":78},{"sl":79},{"sl":80}]},"test_105":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76},{"sl":77},{"sl":78},{"sl":79},{"sl":80}]},"test_122":{"methods":[{"sl":44},{"sl":63},{"sl":70},{"sl":74}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45},{"sl":48},{"sl":49},{"sl":64},{"sl":71},{"sl":76},{"sl":77},{"sl":78},{"sl":79},{"sl":80}]},"test_129":{"methods":[{"sl":56},{"sl":84}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":86},{"sl":87},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_140":{"methods":[{"sl":74}],"name":"Verify serialization","pass":true,"statements":[{"sl":76},{"sl":77},{"sl":78},{"sl":79},{"sl":80}]},"test_173":{"methods":[{"sl":44},{"sl":56},{"sl":63},{"sl":74},{"sl":84}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":45},{"sl":48},{"sl":49},{"sl":57},{"sl":64},{"sl":76},{"sl":77},{"sl":78},{"sl":79},{"sl":80},{"sl":86},{"sl":87},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_217":{"methods":[{"sl":74}],"name":"Verify serializeTotalPayload calculates signature payload fields correctly","pass":true,"statements":[{"sl":76},{"sl":77},{"sl":78},{"sl":79},{"sl":80}]},"test_290":{"methods":[{"sl":44},{"sl":63},{"sl":70},{"sl":74}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":45},{"sl":48},{"sl":49},{"sl":64},{"sl":71},{"sl":76},{"sl":77},{"sl":78},{"sl":79},{"sl":80}]},"test_323":{"methods":[{"sl":44},{"sl":63},{"sl":70},{"sl":74}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45},{"sl":48},{"sl":49},{"sl":64},{"sl":71},{"sl":76},{"sl":77},{"sl":78},{"sl":79},{"sl":80}]},"test_359":{"methods":[{"sl":74}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":76},{"sl":77},{"sl":78},{"sl":79},{"sl":80}]},"test_52":{"methods":[{"sl":96}],"name":"Verify toString","pass":true,"statements":[{"sl":98},{"sl":99},{"sl":101}]},"test_66":{"methods":[{"sl":44},{"sl":56},{"sl":63},{"sl":74},{"sl":84}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":45},{"sl":48},{"sl":49},{"sl":57},{"sl":64},{"sl":76},{"sl":77},{"sl":78},{"sl":79},{"sl":80},{"sl":86},{"sl":87},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_73":{"methods":[{"sl":96}],"name":"Verify toString","pass":true,"statements":[{"sl":98},{"sl":99},{"sl":101}]},"test_90":{"methods":[{"sl":56},{"sl":63},{"sl":70},{"sl":84}],"name":"Verify deserialization","pass":true,"statements":[{"sl":57},{"sl":64},{"sl":71},{"sl":86},{"sl":87},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_93":{"methods":[{"sl":44},{"sl":63},{"sl":70}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":45},{"sl":46},{"sl":48},{"sl":49},{"sl":64},{"sl":71}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines
