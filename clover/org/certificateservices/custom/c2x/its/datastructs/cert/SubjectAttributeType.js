var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":66,"id":2300,"methods":[{"el":48,"sc":2,"sl":46},{"el":52,"sc":2,"sl":50},{"el":64,"sc":2,"sl":57}],"name":"SubjectAttributeType","sl":33}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_102":{"methods":[{"sl":50}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51}]},"test_108":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns verification_key for 0","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_112":{"methods":[{"sl":50}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":51}]},"test_122":{"methods":[{"sl":50}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51}]},"test_125":{"methods":[{"sl":50}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":51}]},"test_143":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns its_aid_ssp_list for 33","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_144":{"methods":[{"sl":50}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":51}]},"test_149":{"methods":[{"sl":50}],"name":"Verify serialization","pass":true,"statements":[{"sl":51}]},"test_173":{"methods":[{"sl":50},{"sl":57}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_181":{"methods":[{"sl":50}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":51}]},"test_184":{"methods":[{"sl":57}],"name":"Verify deserialization","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_230":{"methods":[{"sl":50}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":51}]},"test_232":{"methods":[{"sl":57}],"name":"Verify deserialization","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_233":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns encryption_key for 1","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_235":{"methods":[{"sl":50},{"sl":57}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_242":{"methods":[{"sl":50}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":51}]},"test_25":{"methods":[{"sl":50}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":51}]},"test_254":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns reconstruction_value for 3","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_267":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns its_aid_list for 32","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_273":{"methods":[{"sl":50},{"sl":57}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_277":{"methods":[{"sl":57}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_304":{"methods":[{"sl":50}],"name":"Verify that priority_its_aid_list has bytevalue 34","pass":true,"statements":[{"sl":51}]},"test_306":{"methods":[{"sl":50}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":51}]},"test_310":{"methods":[{"sl":50}],"name":"Verify that encryption_key has bytevalue 1","pass":true,"statements":[{"sl":51}]},"test_316":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns priority_ssp_list for 35","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_318":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns priority_its_aid_list for 34","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_323":{"methods":[{"sl":50}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51}]},"test_331":{"methods":[{"sl":50}],"name":"Verify that verification_key has bytevalue 0","pass":true,"statements":[{"sl":51}]},"test_340":{"methods":[{"sl":50}],"name":"Verify that assurance_level has bytevalue 2","pass":true,"statements":[{"sl":51}]},"test_344":{"methods":[{"sl":50}],"name":"Verify that priority_ssp_list has bytevalue 35","pass":true,"statements":[{"sl":51}]},"test_372":{"methods":[{"sl":50}],"name":"Verify serialization","pass":true,"statements":[{"sl":51}]},"test_386":{"methods":[{"sl":50}],"name":"Verify that reconstruction_value has bytevalue 3","pass":true,"statements":[{"sl":51}]},"test_40":{"methods":[{"sl":50}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":51}]},"test_41":{"methods":[{"sl":50}],"name":"Verify that its_aid_list has bytevalue 32","pass":true,"statements":[{"sl":51}]},"test_47":{"methods":[{"sl":50}],"name":"Verify serialization","pass":true,"statements":[{"sl":51}]},"test_51":{"methods":[{"sl":50}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":51}]},"test_54":{"methods":[{"sl":57}],"name":"Verify deserialization","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_57":{"methods":[{"sl":50}],"name":"Verify that its_aid_ssp_list has bytevalue 33","pass":true,"statements":[{"sl":51}]},"test_66":{"methods":[{"sl":50},{"sl":57}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_78":{"methods":[{"sl":50},{"sl":57}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":51},{"sl":58},{"sl":59},{"sl":60}]},"test_85":{"methods":[{"sl":57}],"name":"Verify that SubjectAttributeType.getByValue returns assurance_level for 2","pass":true,"statements":[{"sl":58},{"sl":59},{"sl":60}]},"test_96":{"methods":[{"sl":50}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":51}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [306, 331, 323, 310, 340, 122, 304, 344, 372, 273, 181, 173, 235, 96, 40, 386, 66, 41, 230, 25, 149, 47, 78, 125, 57, 112, 242, 144, 102, 51], [306, 331, 323, 310, 340, 122, 304, 344, 372, 273, 181, 173, 235, 96, 40, 386, 66, 41, 230, 25, 149, 47, 78, 125, 57, 112, 242, 144, 102, 51], [], [], [], [], [], [108, 232, 85, 184, 233, 277, 273, 173, 318, 235, 267, 143, 66, 78, 316, 54, 254], [108, 232, 85, 184, 233, 277, 273, 173, 318, 235, 267, 143, 66, 78, 316, 54, 254], [108, 232, 85, 184, 233, 277, 273, 173, 318, 235, 267, 143, 66, 78, 316, 54, 254], [108, 232, 85, 184, 233, 277, 273, 173, 318, 235, 267, 143, 66, 78, 316, 54, 254], [], [], [], [], [], [], []]
