var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":76,"id":2369,"methods":[{"el":58,"sc":2,"sl":56},{"el":62,"sc":2,"sl":60},{"el":74,"sc":2,"sl":67}],"name":"SubjectType","sl":46}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_102":{"methods":[{"sl":60}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_110":{"methods":[{"sl":60}],"name":"Verify that authorization_authority has bytevalue 2","pass":true,"statements":[{"sl":61}]},"test_112":{"methods":[{"sl":60}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":61}]},"test_122":{"methods":[{"sl":60}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_125":{"methods":[{"sl":60}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_134":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns root_ca for 4","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_14":{"methods":[{"sl":60}],"name":"Verify that crl_signer has bytevalue 5","pass":true,"statements":[{"sl":61}]},"test_142":{"methods":[{"sl":60}],"name":"Verify serialization of SubjectInfo","pass":true,"statements":[{"sl":61}]},"test_144":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_149":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61}]},"test_162":{"methods":[{"sl":60}],"name":"Verify that enrollment_credential has bytevalue 0","pass":true,"statements":[{"sl":61}]},"test_172":{"methods":[{"sl":60}],"name":"Verify that root_ca has bytevalue 4","pass":true,"statements":[{"sl":61}]},"test_173":{"methods":[{"sl":60},{"sl":67}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_181":{"methods":[{"sl":60}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":61}]},"test_184":{"methods":[{"sl":67}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_230":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":61}]},"test_235":{"methods":[{"sl":60},{"sl":67}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_242":{"methods":[{"sl":60}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":61}]},"test_25":{"methods":[{"sl":60}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":61}]},"test_264":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns authorization_ticket for 1","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_273":{"methods":[{"sl":60},{"sl":67}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_277":{"methods":[{"sl":67}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_29":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns enrollment_credential for 0","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_306":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":61}]},"test_309":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns enrollment_authority for 3","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_323":{"methods":[{"sl":60}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":61}]},"test_352":{"methods":[{"sl":60}],"name":"Verify that authorization_ticket has bytevalue 1","pass":true,"statements":[{"sl":61}]},"test_362":{"methods":[{"sl":60}],"name":"Verify that enrollment_authority has bytevalue 3","pass":true,"statements":[{"sl":61}]},"test_38":{"methods":[{"sl":67}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_381":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns authorization_authority for 2","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_40":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":61}]},"test_46":{"methods":[{"sl":67}],"name":"Verify that SubjectType.getByValue returns crl_signer for 5","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_47":{"methods":[{"sl":60}],"name":"Verify serialization","pass":true,"statements":[{"sl":61}]},"test_51":{"methods":[{"sl":60}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":61}]},"test_54":{"methods":[{"sl":67}],"name":"Verify deserialization","pass":true,"statements":[{"sl":68},{"sl":69},{"sl":70}]},"test_66":{"methods":[{"sl":60},{"sl":67}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_78":{"methods":[{"sl":60},{"sl":67}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":61},{"sl":68},{"sl":69},{"sl":70}]},"test_96":{"methods":[{"sl":60}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":61}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [306, 362, 323, 122, 181, 273, 173, 162, 235, 40, 96, 66, 230, 142, 352, 25, 149, 47, 78, 125, 14, 172, 112, 110, 242, 144, 102, 51], [306, 362, 323, 122, 181, 273, 173, 162, 235, 40, 96, 66, 230, 142, 352, 25, 149, 47, 78, 125, 14, 172, 112, 110, 242, 144, 102, 51], [], [], [], [], [], [29, 184, 134, 277, 309, 273, 173, 235, 66, 78, 381, 46, 264, 38, 54], [29, 184, 134, 277, 309, 273, 173, 235, 66, 78, 381, 46, 264, 38, 54], [29, 184, 134, 277, 309, 273, 173, 235, 66, 78, 381, 46, 264, 38, 54], [29, 184, 134, 277, 309, 273, 173, 235, 66, 78, 381, 46, 264, 38, 54], [], [], [], [], [], []]
