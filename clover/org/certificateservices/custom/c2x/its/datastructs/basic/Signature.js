var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":102,"id":1346,"methods":[{"el":52,"sc":2,"sl":46},{"el":61,"sc":2,"sl":60},{"el":68,"sc":2,"sl":66},{"el":75,"sc":2,"sl":73},{"el":84,"sc":2,"sl":78},{"el":93,"sc":2,"sl":86},{"el":99,"sc":2,"sl":95}],"name":"Signature","sl":34}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_102":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_112":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_118":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Test to generate ECDSA Signature and then verify the signature for algorithm: ecdsa_nistp256_with_sha256","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_119":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with compressed_lsb_y_1 ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_122":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_125":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_129":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_140":{"methods":[{"sl":78}],"name":"Verify serialization","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_144":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_149":{"methods":[{"sl":78}],"name":"Verify serialization","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_173":{"methods":[{"sl":46},{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_175":{"methods":[{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":97}]},"test_181":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_184":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_19":{"methods":[{"sl":60},{"sl":66},{"sl":86}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":67},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_196":{"methods":[{"sl":46},{"sl":78}],"name":"Verify serialization of Signature","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":80},{"sl":81},{"sl":82}]},"test_230":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_235":{"methods":[{"sl":60},{"sl":78},{"sl":86}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_237":{"methods":[{"sl":66}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":67}]},"test_238":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType x_coordinate_only","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_24":{"methods":[{"sl":46},{"sl":66}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":47},{"sl":48},{"sl":50},{"sl":51},{"sl":67}]},"test_242":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_25":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_273":{"methods":[{"sl":60},{"sl":78},{"sl":86}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_277":{"methods":[{"sl":60},{"sl":86}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_290":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify that serializeDataToBeSignedInSecuredMessage serializes according to signature verification it ETSI specifification","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_292":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType compressed_lsb_y_1","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_306":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_321":{"methods":[{"sl":66}],"name":"Verify attachSignature","pass":true,"statements":[{"sl":67}]},"test_323":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_330":{"methods":[{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":97}]},"test_356":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_359":{"methods":[{"sl":78}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_392":{"methods":[{"sl":60},{"sl":66}],"name":"Verify calculateSignatureLength throws exception for #pubAlg","pass":true,"statements":[{"sl":67}]},"test_4":{"methods":[{"sl":78}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_40":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_42":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType compressed_lsb_y_0","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_47":{"methods":[{"sl":78}],"name":"Verify serialization","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]},"test_50":{"methods":[{"sl":46},{"sl":66},{"sl":73}],"name":"Verify calculateSignatureLength for public algorithm ecdsa_nistp256_with_sha256 and R EccPointType uncompressed","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74}]},"test_51":{"methods":[{"sl":46},{"sl":66},{"sl":73},{"sl":78}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82}]},"test_54":{"methods":[{"sl":60},{"sl":86}],"name":"Verify deserialization","pass":true,"statements":[{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_61":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with compressed_lsb_y_0 ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_66":{"methods":[{"sl":46},{"sl":60},{"sl":66},{"sl":73},{"sl":78},{"sl":86}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":67},{"sl":74},{"sl":80},{"sl":81},{"sl":82},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_71":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly no signature trailer field","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_72":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with x_coordinate_only ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_73":{"methods":[{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":97}]},"test_78":{"methods":[{"sl":60},{"sl":66},{"sl":73},{"sl":86}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":67},{"sl":74},{"sl":88},{"sl":89},{"sl":90},{"sl":91}]},"test_83":{"methods":[{"sl":46},{"sl":95}],"name":"Verify toString","pass":true,"statements":[{"sl":47},{"sl":50},{"sl":51},{"sl":97}]},"test_84":{"methods":[{"sl":66},{"sl":73}],"name":"Verify serializeTotalSignedTrailerLength calculates signature trailing fields correctly signature trailer field with uncompressed ecc point","pass":true,"statements":[{"sl":67},{"sl":74}]},"test_96":{"methods":[{"sl":78}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":80},{"sl":81},{"sl":82}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [306, 181, 40, 83, 196, 290, 230, 24, 112, 242, 50, 292, 144, 238, 323, 122, 118, 173, 66, 42, 25, 125, 102, 51], [306, 181, 40, 83, 196, 290, 230, 24, 112, 242, 50, 292, 144, 238, 323, 122, 118, 173, 66, 42, 25, 125, 102, 51], [24], [], [306, 181, 40, 83, 196, 290, 230, 24, 112, 242, 50, 292, 144, 238, 323, 122, 118, 173, 66, 42, 25, 125, 102, 51], [306, 181, 40, 83, 196, 290, 230, 24, 112, 242, 50, 292, 144, 238, 323, 122, 118, 173, 66, 42, 25, 125, 102, 51], [], [], [], [], [], [], [], [], [129, 277, 273, 235, 356, 54, 184, 173, 66, 19, 78, 392], [], [], [], [], [], [306, 321, 181, 84, 40, 72, 290, 237, 230, 24, 112, 242, 50, 292, 144, 238, 323, 119, 122, 118, 173, 66, 42, 19, 25, 78, 125, 61, 71, 102, 392, 51], [306, 321, 181, 84, 40, 72, 290, 237, 230, 24, 112, 242, 50, 292, 144, 238, 323, 119, 122, 118, 173, 66, 42, 19, 25, 78, 125, 61, 71, 102, 392, 51], [], [], [], [], [], [306, 181, 84, 40, 72, 290, 230, 112, 242, 50, 292, 144, 238, 323, 119, 122, 118, 173, 66, 42, 25, 78, 125, 61, 71, 102, 51], [306, 181, 84, 40, 72, 290, 230, 112, 242, 50, 292, 144, 238, 323, 119, 122, 118, 173, 66, 42, 25, 78, 125, 61, 71, 102, 51], [], [], [], [306, 273, 181, 235, 40, 96, 196, 230, 359, 144, 323, 122, 173, 66, 25, 149, 47, 125, 140, 4, 102, 51], [], [306, 273, 181, 235, 40, 96, 196, 230, 359, 144, 323, 122, 173, 66, 25, 149, 47, 125, 140, 4, 102, 51], [306, 273, 181, 235, 40, 96, 196, 230, 359, 144, 323, 122, 173, 66, 25, 149, 47, 125, 140, 4, 102, 51], [306, 273, 181, 235, 40, 96, 196, 230, 359, 144, 323, 122, 173, 66, 25, 149, 47, 125, 140, 4, 102, 51], [], [], [], [129, 277, 273, 235, 356, 54, 184, 173, 66, 19, 78], [], [129, 277, 273, 235, 356, 54, 184, 173, 66, 19, 78], [129, 277, 273, 235, 356, 54, 184, 173, 66, 19, 78], [129, 277, 273, 235, 356, 54, 184, 173, 66, 19, 78], [129, 277, 273, 235, 356, 54, 184, 173, 66, 19, 78], [], [], [], [175, 83, 330, 73], [], [175, 83, 330, 73], [], [], [], [], []]
