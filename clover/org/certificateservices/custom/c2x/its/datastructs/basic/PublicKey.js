var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":173,"id":1153,"methods":[{"el":59,"sc":2,"sl":57},{"el":72,"sc":2,"sl":68},{"el":81,"sc":2,"sl":80},{"el":88,"sc":2,"sl":86},{"el":96,"sc":2,"sl":94},{"el":106,"sc":2,"sl":101},{"el":116,"sc":2,"sl":109},{"el":126,"sc":2,"sl":118},{"el":142,"sc":2,"sl":128},{"el":163,"sc":2,"sl":144},{"el":170,"sc":2,"sl":165}],"name":"PublicKey","sl":45}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_102":{"methods":[{"sl":94},{"sl":109}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_112":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":101},{"sl":109}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":102},{"sl":105},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_122":{"methods":[{"sl":94},{"sl":109}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_125":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_144":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_149":{"methods":[{"sl":109}],"name":"Verify serialization","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_159":{"methods":[{"sl":80},{"sl":86},{"sl":94},{"sl":101},{"sl":118}],"name":"Verify deserialization of PublicKey","pass":true,"statements":[{"sl":87},{"sl":95},{"sl":102},{"sl":103},{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_16":{"methods":[{"sl":128},{"sl":144}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":130},{"sl":131},{"sl":132},{"sl":134},{"sl":138},{"sl":140},{"sl":141},{"sl":146},{"sl":147},{"sl":148},{"sl":150},{"sl":152},{"sl":153},{"sl":156},{"sl":157}]},"test_173":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_175":{"methods":[{"sl":165}],"name":"Verify toString","pass":true,"statements":[{"sl":167}]},"test_181":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_184":{"methods":[{"sl":80},{"sl":118}],"name":"Verify deserialization","pass":true,"statements":[{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_201":{"methods":[{"sl":86}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":87}]},"test_230":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_232":{"methods":[{"sl":80},{"sl":94},{"sl":118}],"name":"Verify deserialization","pass":true,"statements":[{"sl":95},{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_235":{"methods":[{"sl":80},{"sl":109},{"sl":118}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_242":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_25":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_273":{"methods":[{"sl":80},{"sl":109},{"sl":118}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_277":{"methods":[{"sl":80},{"sl":94},{"sl":118}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":95},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_306":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_323":{"methods":[{"sl":94},{"sl":109}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_335":{"methods":[{"sl":68},{"sl":165}],"name":"Verify toString","pass":true,"statements":[{"sl":69},{"sl":70},{"sl":71},{"sl":167}]},"test_372":{"methods":[{"sl":109}],"name":"Verify serialization","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_385":{"methods":[{"sl":165}],"name":"Verify toString","pass":true,"statements":[{"sl":167}]},"test_40":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_47":{"methods":[{"sl":109}],"name":"Verify serialization","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]},"test_51":{"methods":[{"sl":57},{"sl":68},{"sl":86},{"sl":94},{"sl":109}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":111},{"sl":112},{"sl":115}]},"test_54":{"methods":[{"sl":80},{"sl":118}],"name":"Verify deserialization","pass":true,"statements":[{"sl":120},{"sl":121},{"sl":124},{"sl":125}]},"test_63":{"methods":[{"sl":57},{"sl":68},{"sl":128},{"sl":144}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":130},{"sl":131},{"sl":132},{"sl":134},{"sl":138},{"sl":140},{"sl":141},{"sl":146},{"sl":148},{"sl":150},{"sl":152},{"sl":153},{"sl":156},{"sl":157},{"sl":158},{"sl":159},{"sl":160},{"sl":162}]},"test_65":{"methods":[{"sl":57},{"sl":68},{"sl":109}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":111},{"sl":112},{"sl":113},{"sl":115}]},"test_66":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_76":{"methods":[{"sl":57},{"sl":68},{"sl":80},{"sl":86},{"sl":94},{"sl":101}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":58},{"sl":69},{"sl":70},{"sl":71},{"sl":87},{"sl":95},{"sl":102},{"sl":103},{"sl":105}]},"test_78":{"methods":[{"sl":80},{"sl":94},{"sl":109},{"sl":118}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":95},{"sl":111},{"sl":112},{"sl":113},{"sl":115},{"sl":120},{"sl":121},{"sl":122},{"sl":124},{"sl":125}]},"test_96":{"methods":[{"sl":109}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":111},{"sl":112},{"sl":115}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [306, 63, 65, 181, 40, 76, 230, 112, 242, 144, 25, 125, 51], [306, 63, 65, 181, 40, 76, 230, 112, 242, 144, 25, 125, 51], [], [], [], [], [], [], [], [], [], [306, 63, 65, 181, 40, 76, 230, 112, 242, 144, 25, 125, 335, 51], [306, 63, 65, 181, 40, 76, 230, 112, 242, 144, 25, 125, 335, 51], [306, 63, 65, 181, 40, 76, 230, 112, 242, 144, 25, 125, 335, 51], [306, 63, 65, 181, 40, 76, 230, 112, 242, 144, 25, 125, 335, 51], [], [], [], [], [], [], [], [], [277, 273, 235, 76, 159, 54, 232, 184, 173, 66, 78], [], [], [], [], [], [306, 181, 40, 76, 159, 230, 112, 242, 144, 201, 25, 125, 51], [306, 181, 40, 76, 159, 230, 112, 242, 144, 201, 25, 125, 51], [], [], [], [], [], [], [306, 277, 181, 40, 76, 159, 230, 112, 242, 144, 232, 323, 122, 173, 66, 25, 78, 125, 102, 51], [306, 277, 181, 40, 76, 159, 230, 112, 242, 144, 232, 323, 122, 173, 66, 25, 78, 125, 102, 51], [], [], [], [], [], [76, 159, 112], [76, 159, 112], [76, 159], [], [76, 112], [], [], [], [306, 65, 372, 181, 273, 235, 96, 40, 230, 112, 242, 144, 323, 122, 173, 66, 25, 149, 47, 78, 125, 102, 51], [], [306, 65, 372, 181, 273, 235, 96, 40, 230, 112, 242, 144, 323, 122, 173, 66, 25, 149, 47, 78, 125, 102, 51], [306, 65, 372, 181, 273, 235, 96, 40, 230, 112, 242, 144, 323, 122, 173, 66, 25, 149, 47, 78, 125, 102, 51], [65, 273, 235, 112, 78], [], [306, 65, 372, 181, 273, 235, 96, 40, 230, 112, 242, 144, 323, 122, 173, 66, 25, 149, 47, 78, 125, 102, 51], [], [], [277, 273, 235, 159, 54, 232, 184, 173, 66, 78], [], [277, 273, 235, 159, 54, 232, 184, 173, 66, 78], [277, 273, 235, 159, 54, 232, 184, 173, 66, 78], [277, 273, 235, 173, 66, 78], [], [277, 273, 235, 159, 54, 232, 184, 173, 66, 78], [277, 273, 235, 159, 54, 232, 184, 173, 66, 78], [], [], [16, 63], [], [16, 63], [16, 63], [16, 63], [], [16, 63], [], [], [], [16, 63], [], [16, 63], [16, 63], [], [], [16, 63], [], [16, 63], [16], [16, 63], [], [16, 63], [], [16, 63], [16, 63], [], [], [16, 63], [16, 63], [63], [63], [63], [], [63], [], [], [175, 385, 335], [], [175, 385, 335], [], [], [], [], [], []]
