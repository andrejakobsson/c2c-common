var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":63,"id":1542,"methods":[{"el":41,"sc":2,"sl":38},{"el":45,"sc":2,"sl":43},{"el":49,"sc":2,"sl":47},{"el":61,"sc":2,"sl":54}],"name":"SymmetricAlgorithm","sl":32}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_112":{"methods":[{"sl":43}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":44}]},"test_117":{"methods":[{"sl":54}],"name":"Verify that SymmetricAlgorithm.getByValue returns aes_128_ccm for 0","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_12":{"methods":[{"sl":43}],"name":"Verify serialization","pass":true,"statements":[{"sl":44}]},"test_121":{"methods":[{"sl":43},{"sl":47}],"name":"Verify that aes_128_ccm has bytevalue 0","pass":true,"statements":[{"sl":44},{"sl":48}]},"test_145":{"methods":[{"sl":47},{"sl":54}],"name":"Verify deserialization","pass":true,"statements":[{"sl":48},{"sl":55},{"sl":56},{"sl":57}]},"test_171":{"methods":[{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":48}]},"test_173":{"methods":[{"sl":54}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_200":{"methods":[{"sl":43}],"name":"Verify serialization of EncryptionParameters","pass":true,"statements":[{"sl":44}]},"test_235":{"methods":[{"sl":43},{"sl":54}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_250":{"methods":[{"sl":54}],"name":"Verify deserialization of EncryptionParameters","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_265":{"methods":[{"sl":47}],"name":"Verify constructors and getters and setters","pass":true,"statements":[{"sl":48}]},"test_273":{"methods":[{"sl":43},{"sl":54}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_277":{"methods":[{"sl":54}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_280":{"methods":[{"sl":47}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":48}]},"test_370":{"methods":[{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":48}]},"test_65":{"methods":[{"sl":43}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":44}]},"test_66":{"methods":[{"sl":54}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":55},{"sl":56},{"sl":57}]},"test_78":{"methods":[{"sl":43},{"sl":54}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":44},{"sl":55},{"sl":56},{"sl":57}]},"test_99":{"methods":[{"sl":47}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":48}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [12, 121, 65, 273, 235, 78, 112, 200], [12, 121, 65, 273, 235, 78, 112, 200], [], [], [171, 121, 370, 99, 145, 280, 265], [171, 121, 370, 99, 145, 280, 265], [], [], [], [], [], [117, 250, 277, 273, 173, 235, 66, 145, 78], [117, 250, 277, 273, 173, 235, 66, 145, 78], [117, 250, 277, 273, 173, 235, 66, 145, 78], [117, 250, 277, 273, 173, 235, 66, 145, 78], [], [], [], [], [], []]
