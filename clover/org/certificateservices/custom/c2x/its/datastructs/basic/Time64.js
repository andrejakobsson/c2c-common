var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":149,"id":1658,"methods":[{"el":54,"sc":2,"sl":50},{"el":63,"sc":2,"sl":61},{"el":72,"sc":2,"sl":69},{"el":85,"sc":2,"sl":80},{"el":93,"sc":2,"sl":91},{"el":106,"sc":2,"sl":96},{"el":113,"sc":2,"sl":108},{"el":118,"sc":2,"sl":115},{"el":127,"sc":2,"sl":120},{"el":144,"sc":2,"sl":129}],"name":"Time64","sl":37}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_1":{"methods":[{"sl":69},{"sl":80},{"sl":108}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":110},{"sl":111},{"sl":112}]},"test_102":{"methods":[{"sl":50},{"sl":96}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_109":{"methods":[{"sl":61},{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":62},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_113":{"methods":[{"sl":50},{"sl":91}],"name":"Verify the constructors and asElapsedTime","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":92}]},"test_12":{"methods":[{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_122":{"methods":[{"sl":50},{"sl":96}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_129":{"methods":[{"sl":69},{"sl":108}],"name":"Verify deserialization","pass":true,"statements":[{"sl":110},{"sl":111},{"sl":112}]},"test_135":{"methods":[{"sl":50},{"sl":120},{"sl":129}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":122},{"sl":123},{"sl":124},{"sl":126},{"sl":131},{"sl":133},{"sl":135},{"sl":137},{"sl":138},{"sl":141},{"sl":142},{"sl":143}]},"test_140":{"methods":[{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_145":{"methods":[{"sl":69},{"sl":108}],"name":"Verify deserialization","pass":true,"statements":[{"sl":110},{"sl":111},{"sl":112}]},"test_15":{"methods":[{"sl":80},{"sl":115}],"name":"Verify toString","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":117}]},"test_163":{"methods":[{"sl":50},{"sl":91}],"name":"Verify the constructors and getters","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":92}]},"test_173":{"methods":[{"sl":50},{"sl":69},{"sl":96},{"sl":108}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104},{"sl":110},{"sl":111},{"sl":112}]},"test_228":{"methods":[{"sl":69},{"sl":80},{"sl":108}],"name":"Verify deserialization","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":110},{"sl":111},{"sl":112}]},"test_249":{"methods":[{"sl":61},{"sl":80}],"name":"Make sure asDate converts the date correctly","pass":true,"statements":[{"sl":62},{"sl":81},{"sl":82},{"sl":83},{"sl":84}]},"test_301":{"methods":[{"sl":61},{"sl":96}],"name":"Verify serialization","pass":true,"statements":[{"sl":62},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_311":{"methods":[{"sl":50},{"sl":120},{"sl":129}],"name":"Verify hashCode and equals","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":122},{"sl":123},{"sl":124},{"sl":126},{"sl":131},{"sl":133},{"sl":135},{"sl":137},{"sl":138},{"sl":141},{"sl":142},{"sl":143}]},"test_323":{"methods":[{"sl":50},{"sl":96}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_339":{"methods":[{"sl":50},{"sl":80},{"sl":115}],"name":"Verify toString","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":117}]},"test_359":{"methods":[{"sl":96}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104}]},"test_58":{"methods":[{"sl":50},{"sl":80},{"sl":115}],"name":"Verify toString","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":117}]},"test_66":{"methods":[{"sl":50},{"sl":69},{"sl":96},{"sl":108}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":51},{"sl":52},{"sl":53},{"sl":98},{"sl":99},{"sl":102},{"sl":103},{"sl":104},{"sl":110},{"sl":111},{"sl":112}]},"test_73":{"methods":[{"sl":80},{"sl":115}],"name":"Verify toString","pass":true,"statements":[{"sl":81},{"sl":82},{"sl":83},{"sl":84},{"sl":117}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [113, 66, 58, 135, 323, 122, 339, 163, 311, 173, 102], [113, 66, 58, 135, 323, 122, 339, 163, 311, 173, 102], [113, 66, 58, 135, 323, 122, 339, 163, 311, 173, 102], [113, 66, 58, 135, 323, 122, 339, 163, 311, 173, 102], [], [], [], [], [], [], [], [109, 301, 249], [109, 301, 249], [], [], [], [], [], [], [66, 129, 145, 1, 173, 228], [], [], [], [], [], [], [], [], [], [], [58, 15, 339, 1, 249, 73, 228], [58, 15, 339, 1, 249, 73, 228], [58, 15, 339, 1, 249, 73, 228], [58, 15, 339, 1, 249, 73, 228], [58, 15, 339, 1, 249, 73, 228], [], [], [], [], [], [], [113, 163], [113, 163], [], [], [], [66, 12, 359, 109, 323, 122, 140, 301, 173, 102], [], [66, 12, 359, 109, 323, 122, 140, 301, 173, 102], [66, 12, 359, 109, 323, 122, 140, 301, 173, 102], [], [], [66, 12, 359, 109, 323, 122, 140, 301, 173, 102], [66, 12, 359, 109, 323, 122, 140, 301, 173, 102], [66, 12, 359, 109, 323, 122, 140, 301, 173, 102], [], [], [], [66, 129, 145, 1, 173, 228], [], [66, 129, 145, 1, 173, 228], [66, 129, 145, 1, 173, 228], [66, 129, 145, 1, 173, 228], [], [], [58, 15, 339, 73], [], [58, 15, 339, 73], [], [], [135, 311], [], [135, 311], [135, 311], [135, 311], [], [135, 311], [], [], [135, 311], [], [135, 311], [], [135, 311], [], [135, 311], [], [135, 311], [135, 311], [], [], [135, 311], [135, 311], [135, 311], [], [], [], [], [], []]
