var clover = new Object();

// JSON: {classes : [{name, id, sl, el,  methods : [{sl, el}, ...]}, ...]}
clover.pageData = {"classes":[{"el":60,"id":664,"methods":[{"el":42,"sc":2,"sl":40},{"el":46,"sc":2,"sl":44},{"el":58,"sc":2,"sl":51}],"name":"EccPointType","sl":32}]}

// JSON: {test_ID : {"methods": [ID1, ID2, ID3...], "name" : "testXXX() void"}, ...};
clover.testTargets = {"test_102":{"methods":[{"sl":44}],"name":"Generate Signed CAM Unrecognized Certificates Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45}]},"test_112":{"methods":[{"sl":44}],"name":"Generate RootCA with Encryption Key and Geographic region and verify that all attributes are set.","pass":true,"statements":[{"sl":45}]},"test_12":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_122":{"methods":[{"sl":44}],"name":"Generate Signed CAM Message with and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45}]},"test_125":{"methods":[{"sl":44}],"name":"Generate Enrollment Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":45}]},"test_129":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_138":{"methods":[{"sl":44}],"name":"Verify serialization of EccPoint","pass":true,"statements":[{"sl":45}]},"test_140":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_144":{"methods":[{"sl":44}],"name":"Generate Authorization Ticket with a digest as signer info","pass":true,"statements":[{"sl":45}]},"test_145":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_149":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_150":{"methods":[{"sl":51}],"name":"Verify that EccPointType.getByValue returns x_coordinate_only for 0","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_151":{"methods":[{"sl":51}],"name":"Verify deserialization of EccPoint","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_159":{"methods":[{"sl":51}],"name":"Verify deserialization of PublicKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_171":{"methods":[{"sl":51}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_173":{"methods":[{"sl":44},{"sl":51}],"name":"Verify SignSecuredMessage using signer info type: certificate_digest_with_ecdsap256 generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_181":{"methods":[{"sl":44}],"name":"Generate Authorization Ticket with a certificate as signer info","pass":true,"statements":[{"sl":45}]},"test_184":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_19":{"methods":[{"sl":51}],"name":"Verify deserialization ofSignature","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_191":{"methods":[{"sl":44}],"name":"Verify that x_coordinate_only has bytevalue 0","pass":true,"statements":[{"sl":45}]},"test_192":{"methods":[{"sl":44}],"name":"Verify that compressed_lsb_y_1 has bytevalue 3","pass":true,"statements":[{"sl":45}]},"test_196":{"methods":[{"sl":44}],"name":"Verify serialization of Signature","pass":true,"statements":[{"sl":45}]},"test_230":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a certificate as signer info","pass":true,"statements":[{"sl":45}]},"test_232":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_235":{"methods":[{"sl":44},{"sl":51}],"name":"Verify deserialization and serialization of reference ETSI Certificates works","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_242":{"methods":[{"sl":44}],"name":"Generate RootCA without Encryption Key and Geographic region and verify that all other attributes are set.","pass":true,"statements":[{"sl":45}]},"test_25":{"methods":[{"sl":44}],"name":"Generate Authorization Authority and verify that it is signed by the Root CA","pass":true,"statements":[{"sl":45}]},"test_273":{"methods":[{"sl":44},{"sl":51}],"name":"Verify that serializeCertWithoutSignature encodes the certificate without the signature correcly","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_277":{"methods":[{"sl":51}],"name":"Verify getVerificationKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_280":{"methods":[{"sl":51}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_282":{"methods":[{"sl":44}],"name":"Verify serialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":45}]},"test_287":{"methods":[{"sl":51}],"name":"Verify deserialization of EcdsaSignature","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_3":{"methods":[{"sl":44}],"name":"Verify that compressed_lsb_y_0 has bytevalue 2","pass":true,"statements":[{"sl":45}]},"test_300":{"methods":[{"sl":44}],"name":"Verify that uncompressed has bytevalue 4","pass":true,"statements":[{"sl":45}]},"test_306":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":45}]},"test_323":{"methods":[{"sl":44}],"name":"Generate Signed DENM Message and verify that all required fields are set and signature verifies.","pass":true,"statements":[{"sl":45}]},"test_332":{"methods":[{"sl":44}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":45}]},"test_356":{"methods":[{"sl":51}],"name":"Verify deserialization of EciesNistP256EncryptedKey","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_358":{"methods":[{"sl":44}],"name":"Verify serialization of EcdsaSignature","pass":true,"statements":[{"sl":45}]},"test_359":{"methods":[{"sl":44}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":45}]},"test_372":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_4":{"methods":[{"sl":44}],"name":"Verify serialization of RecipientInfo","pass":true,"statements":[{"sl":45}]},"test_40":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a certificate chain as signer info","pass":true,"statements":[{"sl":45}]},"test_47":{"methods":[{"sl":44}],"name":"Verify serialization","pass":true,"statements":[{"sl":45}]},"test_51":{"methods":[{"sl":44}],"name":"Generate Enrollment Credential with a digest as signer info","pass":true,"statements":[{"sl":45}]},"test_54":{"methods":[{"sl":51}],"name":"Verify deserialization","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_65":{"methods":[{"sl":44}],"name":"Verify serialization of PublicKey","pass":true,"statements":[{"sl":45}]},"test_66":{"methods":[{"sl":44},{"sl":51}],"name":"Verify SignSecuredMessage using signer info type: certificate generates a valid signature and that verifySecuredMessage can verify it.","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_78":{"methods":[{"sl":44},{"sl":51}],"name":"Test to verifyCertificate","pass":true,"statements":[{"sl":45},{"sl":52},{"sl":53},{"sl":54}]},"test_82":{"methods":[{"sl":51}],"name":"Verify that EccPointType.getByValue returns compressed_lsb_y_0 for 2","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_86":{"methods":[{"sl":51}],"name":"Verify that EccPointType.getByValue returns compressed_lsb_y_1 for 3","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_87":{"methods":[{"sl":51}],"name":"Verify that EccPointType.getByValue returns uncompressed for 4","pass":true,"statements":[{"sl":52},{"sl":53},{"sl":54}]},"test_96":{"methods":[{"sl":44}],"name":"Verify getEncoded","pass":true,"statements":[{"sl":45}]}}

// JSON: { lines : [{tests : [testid1, testid2, testid3, ...]}, ...]};
clover.srcFileLines = [[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [12, 306, 65, 372, 273, 181, 235, 40, 96, 196, 230, 359, 300, 112, 242, 3, 144, 191, 323, 122, 192, 358, 332, 173, 138, 66, 25, 149, 47, 78, 125, 140, 4, 282, 102, 51], [12, 306, 65, 372, 273, 181, 235, 40, 96, 196, 230, 359, 300, 112, 242, 3, 144, 191, 323, 122, 192, 358, 332, 173, 138, 66, 25, 149, 47, 78, 125, 140, 4, 282, 102, 51], [], [], [], [], [], [171, 129, 277, 273, 235, 159, 356, 145, 280, 82, 86, 54, 232, 184, 287, 173, 66, 19, 151, 87, 78, 150], [171, 129, 277, 273, 235, 159, 356, 145, 280, 82, 86, 54, 232, 184, 287, 173, 66, 19, 151, 87, 78, 150], [171, 129, 277, 273, 235, 159, 356, 145, 280, 82, 86, 54, 232, 184, 287, 173, 66, 19, 151, 87, 78, 150], [171, 129, 277, 273, 235, 159, 356, 145, 280, 82, 86, 54, 232, 184, 287, 173, 66, 19, 151, 87, 78, 150], [], [], [], [], [], []]
